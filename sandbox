#!/usr/bin/env python3
"""
Scratch file for experimenting with the network simulation.
"""

# Import components from your package
from network_environment import NetworkEnvironment
from schedulers import round_robin_scheduler, least_loaded_scheduler, pattern_aware_scheduler

def main():
    """Test various simulation scenarios."""
    
    print("Creating network environment...")
    # Create environment with realistic AP capacities
    # Most enterprise APs can handle 50-100 Mbps of actual throughput
    env = NetworkEnvironment(num_aps=3, ap_capacities=[10, 15, 20])
    env.max_steps = 2500

    # Configure traffic patterns for ~260 active devices
    traffic_patterns = {
        'smooth': {
            'enabled': False, 
            'rate': 80  # ~80 packets per second baseline
        },
        
        'periodic': {
            'enabled': False, 
            'base_rate': 50,    # Base load
            'period': 10,       # 10-second cycle
            'amplitude': 40     # Variation amount
        },
        
        'burst': {
            'enabled': True, 
            'base_rate': 30,       # Background bursts
            'burst_prob': 0.20,    # Probability of burst occurring (frequent)
            'burst_size': 90       # Size of burst when it happens
        }
    }
    
    s = least_loaded_scheduler
    print(f"\nRunning simulation with {s.__name__} scheduler...")
    # Run a simulation with `s` scheduling
    metrics = env.run_episode(
        traffic_patterns,
        scheduler=s,
        render=True,
        render_interval=50  # Render every 50 steps
    )
    
    # Print final metrics
    print("\nFinal Metrics:")
    for key, value in metrics.items():
        if isinstance(value, (int, float)):
            print(f"  {key}: {value:.2f}")
        else:
            print(f"  {key}: {value}")
    
    # Visualize results
    env.visualize_results()
    
    print("\nSimulation complete!")

if __name__ == "__main__":
    main()